import psycopg2
import asyncio
import copy
import re

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.enums import ParseMode

import logging
import sys

from config import *
from kbs import *

import models
from database import SessionLocal, engine

bot = Bot(TOKEN_API)

dp = Dispatcher()

quests_description = {
    "–°–ª–∞–¥–∫–∞—è –ö–æ–Ω—Ç—Ä–∞–±–∞–Ω–¥–∞": {
        "description": "üîç –ù–∞ —Å–≤—è–∑–∏ –°–ª–µ–¥–æ–ë–æ—Ç. –í –Ω–∞—à–µ–º –≥–æ—Ä–æ–¥–µ –∑–∞–º–µ—Ç–Ω–æ —É–≤–µ–ª–∏—á–∏–ª–æ—Å—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª—É—á–∞–µ–≤ –∫–æ–Ω—Ç—Ä–∞–±–∞–Ω–¥—ã. –û–±—Ä–∞—â–∞—é—Å—å –∫ –≤–∞–º –∑–∞ –ø–æ–º–æ—â—å—é –≤ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ–∏—Å—à–µ—Å—Ç–≤–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ –Ω–µ–¥–∞–≤–Ω–æ –Ω–∞ —É–ª–∏—Ü–µ –ë–∞—É–º–∞–Ω–∞. –í–∞—à–∞ –∑–∞–¥–∞—á–∞ - –ø–æ–º–æ—á—å –Ω–∞–º –≤—ã—è–≤–∏—Ç—å –∫–æ–Ω—Ç—Ä–∞–±–∞–Ω–¥—É –∏ —Ä–∞—Å–∫—Ä—ã—Ç—å —Ç–∞–π–Ω—ã –ø—Ä–µ—Å—Ç—É–ø–Ω–∏–∫–æ–≤. üïµÔ∏è‚Äç‚ôÇÔ∏è",
        "offer": "–í—ã –ø–æ–¥–µ–ª–∞–ª–∏ —Ö–æ—Ä–æ—à—É—é —Ä–∞–±–æ—Ç—É, ..."
    },
    "–¢–∞–π–Ω–∞ –®–æ–∫–æ–ª–∞–¥–∞": {
        "description": "üç´ –£ –∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —à–æ–∫–æ–ª–∞—Ç—å–µ, –º–∏—Å—Ç–µ—Ä–∞ –ì—É—Å—Ç–∞–≤–∞, —É–∫—Ä–∞–ª–∏ —Ä–µ—Ü–µ–ø—Ç –µ–≥–æ –Ω–æ–≤–æ–≥–æ —à–æ–∫–æ–ª–∞–¥–∞ '–ü—Ä–æ–≤–∞–Ω—Å–∞–ª—å'. –ú–∏—Å—Ç–µ—Ä –ì—É—Å—Ç–∞–≤ –æ–±–µ—â–∞–ª —Ö–æ—Ä–æ—à—É—é –Ω–∞–≥—Ä–∞–¥—É —Ç–µ–º, –∫—Ç–æ –Ω–∞–π–¥–µ—Ç –ø—Ä–µ—Å—Ç—É–ø–Ω–∏–∫–∞. –û–¥–Ω–∞–∫–æ –Ω–∞–¥–æ —Ç–æ—Ä–æ–ø–∏—Ç—å—Å—è, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –¥–æ —Ç–æ–≥–æ, –∫–∞–∫ —Ä–µ—Ü–µ–ø—Ç –æ–∫–∞–∂–µ—Ç—Å—è —É –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤. üïµÔ∏è‚Äç‚ôÇÔ∏èüö®",
        "offer": None
    }
}

quests = {
    "–°–ª–∞–¥–∫–∞—è –ö–æ–Ω—Ç—Ä–∞–±–∞–Ω–¥–∞": [
        {"image": "https://img.tourister.ru/files/2/3/1/9/0/6/4/6/clones/870_653_fixedwidth.jpg",
         "description": "üïµÔ∏è‚Äç‚ôÇÔ∏è –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤–∑—è–ª–∏—Å—å –∑–∞ —ç—Ç–æ –¥–µ–ª–æ. –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–π–¥–µ–º –∫ —Å—É—Ç–∏.\n\n–ù–∞—à–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–æ—Ä—ã –¥–æ–ª–æ–∂–∏–ª–∏, —á—Ç–æ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ –ª—é–¥–∏ –≤–∏–¥–µ–ª–∏ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –Ω–µ–∑–Ω–∞–∫–æ–º—Ü–∞ –≤–æ–∑–ª–µ —Ñ–æ–Ω—Ç–∞–Ω–∞ —Å —á–µ—Ç—ã—Ä—å–º—è –∂–∞–±–∞–º–∏. –ú—ã –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–∞—à –ø–æ–¥–æ–∑—Ä–µ–≤–∞–µ–º—ã–π. –°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å –æ–Ω –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è –Ω–µ–ø–æ–¥–∞–ª–µ–∫—É. –û—á–µ–≤–∏–¥—Ü—ã –≥–æ–≤–æ—Ä—è—Ç, —á—Ç–æ –Ω–∞ —ç—Ç–∞–∂–µ, –≥–¥–µ –æ–Ω –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è, –±—ã–ª–æ 7 –æ–∫–æ–Ω. –ü–æ–º–æ–≥–∏—Ç–µ –Ω–∞–º —É–∑–Ω–∞—Ç—å, –≤ –∫–∞–∫–æ–º –º–µ—Å—Ç–µ –æ–Ω –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è. üïµÔ∏è‚Äç‚ôÄÔ∏è",
         "answer": "–≤–µ—Ä–Ω–∏—Å–∞–∂ —Ä–µ–º–µ—Å–µ–ª",
         "exception": "üïµÔ∏è‚Äç‚ôÇÔ∏è –ü–æ –≤–∞—à–µ–π –Ω–∞–≤–æ–¥–∫–µ –Ω–∞—à–∏ —Å—ã—â–∏–∫–∏ –æ–±—ã—Å–∫–∞–ª–∏ {answer}, –æ–¥–Ω–∞–∫–æ –Ω–∏–∫–∞–∫–∏—Ö —É–ª–∏–∫ –Ω–µ –Ω–∞—à–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã."},
        {"image": None,
         "description": "üîç –Ø –æ—Ç–ø—Ä–∞–≤–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ç–æ—Ä–æ–≤ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∑–¥–∞–Ω–∏—è...\n\nüìù –ú–´ –ù–ê–®–õ–ò –ó–ê–ü–ò–°–ö–£!!!\n\n–í –∑–∞–ø–∏—Å–∫–µ —Å–∫–∞–∑–∞–Ω–æ: '–≤—Å—Ç—Ä–µ—Ç–∏–º—Å—è –Ω–∞ –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–∫–µ –Ω–∞ —Ç–æ—á–∫–µ –¥–æ –ú–æ—Å–∫–≤—ã 722 –∫–º'. –ß—Ç–æ —ç—Ç–æ –∑–Ω–∞—á–∏—Ç? –ù–∞–π–¥–∏—Ç–µ —ç—Ç–æ –º–µ—Å—Ç–æ –∏ –¥–æ–ª–æ–∂–∏—Ç–µ, —á—Ç–æ –≤—ã –Ω–∞—à–ª–∏. üó∫Ô∏è",
         "answer": "–∫–∞–º–µ–Ω—å",
         "exception": "üòî –≠–≥—Ö—Ö, —ç—Ç–æ —Ç–æ—á–Ω–æ –Ω–∞–º –ø–æ–º–æ–∂–µ—Ç. –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ, –º–æ–∂–µ—Ç, —Ç–∞–º –µ—Å—Ç—å –µ—â–µ –∑–∞—Ü–µ–ø–∫–∏?"},
        {"image": "https://s1.stc.all.kpcdn.net/putevoditel/projectid_379258/images/tild3430-6664-4639-b565-373563356665__edc48dc599feca9c544d.jpg",
         "description": "üïµÔ∏è‚Äç‚ôÇÔ∏è –ü—Ä–æ–≤–æ–¥–∏–º –ø—Ä–æ–≤–µ—Ä–∫—É...\n\nüîç –û—Ç–ª–∏—á–Ω–æ! –ú—ã —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–ª–∏ –ø–æ—Å–ª–∞–Ω–∏–µ. –ü–æ–¥–æ–∑—Ä–µ–≤–∞–µ–º—ã–π —Å–∫–∞–∑–∞–ª, —á—Ç–æ —Ç–æ–≤–∞—Ä –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –∑–∞–±—Ä–∞—Ç—å –Ω–æ—á—å—é –≤ —É–ø—Ä—è–∂–∫–µ –ï–∫–∞—Ç–µ—Ä–∏–Ω—ã II. –≠–≥—Ö—Ö, —á—Ç–æ? –ï—Å–ª–∏ —É —Ç–µ–±—è –ø–æ–ª—É—á–∏–ª–æ—Å—å —á—Ç–æ-—Ç–æ –Ω–∞–π—Ç–∏, –¥–æ–ª–æ–∂–∏ –Ω–∞–º —Å–∫–æ—Ä–µ–µ. üì¶üåô",
         "answer": "–¥–æ–±—Ä–∞—è —Å—Ç–æ–ª–æ–≤–∞—è",
         "exception": "ü§î –•–º–º, —ç—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ, –æ–¥–Ω–∞–∫–æ —ç—Ç–æ–≥–æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, —á—Ç–æ–±—ã –≤—ã–π—Ç–∏ –Ω–∞ —Å–ª–µ–¥ –ø—Ä–µ—Å—Ç—É–ø–Ω–∏–∫–∞. –ü–æ—Å–º–æ—Ç—Ä–∏, –º–æ–∂–µ—Ç, —Ç—ã –µ—â–µ —á—Ç–æ-—Ç–æ –Ω–∞–π–¥–µ—à—å?"},
    ],
    "–¢–∞–π–Ω–∞ –®–æ–∫–æ–ª–∞–¥–∞": [
        {"image": None,
         "description": "üç´ –°–µ–≥–æ–¥–Ω—è —Ç–µ–±–µ –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç –∑–∞–Ω—è—Ç—å—Å—è –æ—á–µ–Ω—å —Å—Ç—Ä–∞–Ω–Ω—ã–º –¥–µ–ª–æ–º. –£—Ç—Ä–æ–º –Ω–∞—à–∞ —Å–ª—É–∂–±–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –æ–±–Ω–∞—Ä—É–∂–∏–ª–∞, —á—Ç–æ –∏–∑–≤–µ—Å—Ç–Ω—ã–π —à–æ–∫–æ–ª–∞—Ç—å–µ, –º–∏—Å—Ç–µ—Ä –ì—É—Å—Ç–∞–≤, –æ–±–≤–∏–Ω—è–µ—Ç –≤–æ—Ä–∞ –≤ –∫—Ä–∞–∂–µ –µ–≥–æ –Ω–æ–≤–æ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞ —à–æ–∫–æ–ª–∞–¥–∞ '–ü—Ä–æ–≤–∞–Ω—Å–∞–ª—å'. –ü–æ–¥–æ–∑—Ä–µ–≤–∞–µ–º—ã–π –±—ã–ª –∑–∞–º–µ—á–µ–Ω –≤–æ–∑–ª–µ —É–ª–∏—Ü—ã '–®–æ–∫–æ–ª–∞–¥–Ω–æ–π –ì–∞–ª–µ—Ä–µ–∏'. –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∫—Ä—É–≥ –∏ —Å–æ–æ–±—â–∏—Ç–µ, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –æ–±–Ω–∞—Ä—É–∂–∏—Ç–µ. üïµÔ∏è‚Äç‚ôÇÔ∏èüîç",
         "answer": "–∑–∞–ø–∏—Å–∫–∞",
         "exception": "üîç –ú—ã –ø—Ä–æ–≤–µ—Ä–∏–ª–∏ —Ç–≤–æ—é —É–ª–∏–∫—É, –Ω–æ –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑. ü§î"},
        {"image": None,
         "description": "üïµÔ∏è‚Äç‚ôÇÔ∏è –û—Ç–ª–∏—á–Ω–æ, –Ω–∞—à–∏ —Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª–∏ –∑–∞–ø–∏—Å–∫—É –∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–ª–∏ –∏–º—è '–ú–æ—Ä—Ç–µ–∑'.\n\nüîç –ú–æ—Ä—Ç–µ–∑, –ú–æ—Ä—Ç–µ–∑... –•–º–º... –ü—Ä–æ–≤–µ—Ä—å –º–∞–≥–∞–∑–∏–Ω '–®–æ–∫–æ–ª–∞–¥–Ω—ã–µ –ò–∑—ã—Å–∫–∏'. –•–æ–∑—è–∏–Ω–∞ —ç—Ç–æ–≥–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –∑–æ–≤—É—Ç –î–∞—Ä—Ç–∞–Ω—å—è–Ω. –ú–æ–∂–µ—Ç –±—ã—Ç—å, –æ–Ω —á—Ç–æ-—Ç–æ –∑–Ω–∞–µ—Ç? ü§îüç´",
         "answer": "–±—É–º–∞–≥–∞",
         "exception": "–í–∞—à–∏ —É—Å–∏–ª–∏—è –ø–æ–º–æ–≥–ª–∏, –Ω–æ –Ω–∞–º –Ω—É–∂–Ω–æ –µ—â–µ –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. üìùüîç"},
        {"image": None,
         "description": "–¢–µ–ø–µ—Ä—å, –∫–æ–≥–¥–∞ –º—ã –∑–Ω–∞–µ–º, –∫—Ç–æ —Ç–∞–∫–æ–π '–ú–æ—Ä—Ç–µ–∑', –º—ã –º–æ–∂–µ–º –µ–≥–æ –ø–æ–π–º–∞—Ç—å. –ù–∞—à '–ú–æ—Ä—Ç–µ–∑', –∏–ª–∏ –ê—Ä—Ç—ë–º, –Ω–∞–∑–Ω–∞—á–∏–ª –≤—Å—Ç—Ä–µ—á—É —Å –¥–∏—Ä–µ–∫—Ç–æ—Ä–æ–º '–°–ª–∞–¥–∫–æ–π –ñ–∏–∑–Ω–∏'. –Ø –¥—É–º–∞—é, —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å—Å—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–æ–º –∏ –≤—ã–≤–µ–¥–∞—Ç—å —É –Ω–µ–≥–æ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –ú—ã –Ω–∞–¥–µ–µ–º—Å—è –Ω–∞ —Ç–µ–±—è, –±–æ–ª—å—à–µ —É –Ω–∞—Å —Ç–∞–∫–æ–≥–æ —à–∞–Ω—Å–∞ –º–æ–∂–µ—Ç –Ω–µ –±—ã—Ç—å. üïµÔ∏è‚Äç‚ôÇÔ∏èüîç",
         "answer": "—à–æ–∫–æ–ª–∞–¥–Ω–∏—Ü–∞",
         "exception": "–ù–µ—Ç! –í–∞—à–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –±—ã–ª–∞ –ø–æ–ª–µ–∑–Ω–æ–π, –Ω–æ –Ω–∞–º –Ω—É–∂–Ω–æ –µ—â–µ –±–æ–ª—å—à–µ, —á—Ç–æ–±—ã –ø–æ–π–º–∞—Ç—å –ø—Ä–µ—Å—Ç—É–ø–Ω–∏–∫–∞. üö®üîç"},
    ],
}


@dp.message(CommandStart())
async def command_start_handler(message: types.Message):
    db = SessionLocal()
    user = db.query(models.User).filter(models.User.user_tg_id == message.from_user.id).first()
    # Check if user exists
    if not user:
        try:
            tg_user_id = message.from_user.id
            username = message.from_user.username
            name = message.from_user.first_name
            surname = message.from_user.last_name
            new_user = models.User(user_tg_id=tg_user_id, username=username, name=name, surname=surname)
            db.add(new_user)
            db.commit()
        finally:
            db.close()
    await message.answer(text=BOT_DESC, parse_mode='HTML', reply_markup=kb_client)


@dp.message(lambda message: message.text.lower() == '–∫–≤–µ—Å—Ç—ã')
async def show_quests(message: types.Message):
    inline_keyboard = []
    for quest in quests:
        inline_keyboard.append(InlineKeyboardButton(text=quest, callback_data=f"quest_{quest}"))
    quest_options = InlineKeyboardMarkup(inline_keyboard=[inline_keyboard])
    await message.answer("–£ –Ω–∞—Å –µ—Å—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–≤–µ—Å—Ç—ã üó∫:", reply_markup=quest_options)


def check_quest_status(user_id, quest_name):
    quest = get_quest_by_name(user_id, quest_name)
    if quest:
        step, quest_name = quest.step, quest.quest_name
        riddles = quests.get(quest_name)
        if step == len(riddles):
            return True
    return False


@dp.callback_query(lambda query: query.data.startswith('quest'))
async def process_quest(callback_query: types.CallbackQuery):
    quest_name = callback_query.data.split('_')[1]
    user_id = callback_query.from_user.id
    await bot.answer_callback_query(callback_query.id)
    if check_quest_status(user_id, quest_name):
        return await bot.send_message(user_id, "–ö–≤–µ—Å—Ç —É–∂–µ –ø—Ä–æ–∏ÃÜ–¥—ë–Ω")
    inline_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text='–ù–∞–∑–∞–¥ ‚ùå', callback_data=f"start_back_nothing"),
            InlineKeyboardButton(text='–ù–∞—á–∞—Ç—å ‚úÖ', callback_data="start_start_{}".format(quest_name)),
        ]
    ])
    await bot.send_message(user_id, quests_description.get(quest_name).get('description'), reply_markup=inline_keyboard)


@dp.callback_query(lambda query: query.data.startswith('start'))
async def process_start(callback_query: types.CallbackQuery):
    option = callback_query.data.split('_')[1]
    quest_name = callback_query.data.split('_')[2]
    user_id = callback_query.from_user.id
    if option == 'start':
        db = SessionLocal()
        try:
            new_quest = models.Quest(player_id=user_id, quest_name=quest_name, active=True)
            db.add(new_quest)
            db.commit()
        finally:
            db.close()
        await bot.answer_callback_query(callback_query.id)
        await send_quest_step(user_id)
    elif option == 'back':
        await bot.answer_callback_query(callback_query.id)
        message = callback_query.message
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)


async def send_quest_step(user_id):
    db = SessionLocal()
    try:
        quest = db.query(models.Quest).filter(models.Quest.player_id == user_id, models.Quest.active == True).first()
        step, quest_name = quest.step, quest.quest_name
        riddles = quests.get(quest_name)
        if step < len(riddles):
            riddle = riddles[step]
            if riddle['image']:
                await bot.send_photo(user_id, riddle['image'])
            await bot.send_message(user_id, riddle['description'])
        else:
            await update_quest(user_id, {"active": False})
            if quests_description.get(quest_name).get('offer', None):
                await bot.send_message(user_id, quests_description.get(quest_name).get('offer'))
            else:
                await bot.send_message(user_id, "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã –ø—Ä–æ—à–ª–∏ –∫–≤–µ—Å—Ç!")
    finally:
        db.close()


@dp.message(lambda message: message.text.lower() == '–ø–æ–º–æ—â—å')
async def show_help(message: types.Message):
    await command_help_handler(message)


@dp.message(lambda message: message.text.lower() == '—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã')
async def show_results(message: types.Message):
    await message.answer("–ú–æ–ª–æ–¥–µ—Ü! –°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –∫–≤–µ—Å—Ç–æ–≤ üôè")


@dp.message(lambda message: message.text.lower() == 'feedback')
async def show_results(message: types.Message):
    await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ feedback üôè")


@dp.message(F.text == '/help')
async def command_help_handler(message: types.Message):
    await bot.send_message(message.from_user.id, text=HELP_COMMAND)


def get_quest_by_name(user_id, quest_name):
    db = SessionLocal()
    try:
        quest = db.query(models.Quest).filter(models.Quest.player_id == user_id, models.Quest.quest_name == quest_name).first()
        if quest:
            return quest
        return None
    finally:
        db.close()

def get_quest(user_id):
    db = SessionLocal()
    try:
        quest = db.query(models.Quest).filter(models.Quest.player_id == user_id, models.Quest.active == True).first()
        if quest:
            return quest
        return None
    finally:
        db.close()


async def update_quest(user_id, data):
    db = SessionLocal()
    try:
        quest_query = db.query(models.Quest).filter(models.Quest.player_id == user_id, models.Quest.active == True)
        quest_query.update(data, synchronize_session=False)
        db.commit()
    finally:
        db.close()


@dp.message()
async def check_answer(message: types.Message):
    # Checking the answer
    user_id = message.from_user.id
    quest = get_quest(user_id)
    if quest:
        step, quest_name = quest.step, quest.quest_name
        riddles = quests.get(quest_name)
        if step < len(riddles):
            riddle = riddles[step]
            # TODO compare leivenstain distance
            if message.text.lower() == riddle['answer']:
                await bot.send_message(user_id, "–ü—Ä–æ–≤–µ—Ä—è–µ–º...")
                await update_quest(user_id, {"step": step + 1})
                await send_quest_step(user_id)
            else:
                await bot.send_message(user_id, riddle['exception'].format(answer=riddle['answer']))
        else:
            await update_quest(user_id, {"active": False})
            await bot.send_message(user_id, "–í—ã —É–∂–µ –ø—Ä–æ—à–ª–∏ –≤—Å–µ –∑–∞–≥–∞–¥–∫–∏ —ç—Ç–æ–≥–æ –∫–≤–µ—Å—Ç–∞.")
    else:
        await bot.send_message(user_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–º —Ç–µ–∫—É—â–µ–º –∫–≤–µ—Å—Ç–µ.")


@dp.message(F.text == '/give')
async def command_sticker_getter(message: types.Message):
    await bot.send_sticker(message.from_user.id, sticker="CAACAgIAAxkBAAELPv5lsm2w9MAbdBF4luE65X0ryDgWuAACRyEAAmOvOUjsoVCVkQTwUjQE")


async def main() -> None:
    await dp.start_polling(bot)

if __name__ == '__main__':
    models.Base.metadata.create_all(bind=engine)
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())
